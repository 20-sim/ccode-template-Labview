/**********************************************************
 * This file is generated by the 20-sim C++ Code Generator
 *
 *  file:  %FILE_NAME%
 *  subm:  %SUBMODEL_NAME%
 *  model: %MODEL_NAME%
 *  expmt: %EXPERIMENT_NAME%
 *  date:  %GENERATION_DATE%
 *  time:  %GENERATION_TIME%
 *  user:  %USER_NAME%
 *  from:  %COMPANY_NAME%
 *  build: %GENERATION_BUILD%
 **********************************************************/

#define DEBUGTRACER	//For redirecting DPRINTF/TRACE/TRACEOBJ to the DebugTracer tool

#ifndef TRACE_H
#define TRACE_H

#ifdef DEBUG
	#ifdef DEBUGTRACER
		#define TRACE(x) Trace("-> " x "\n")
		#define TRACEOBJ(x) Trace("-> " x "\n", this)
		#define DPRINTF Trace
	#else
		#define TRACE(x) printf("-> " x "\n")
		#define TRACEOBJ(x) printf("-> " x "\n", this)
		#define DPRINTF printf
	#endif
#else
	#define TRACE(x)
	#define TRACEOBJ(x)
	#define DPRINTF
#endif

#if defined DEBUGTRACER && defined DEBUG

#include <windows.h>

/**
 * Trace
 *
 * Debug trace function. Works like printf, but the output is redirected to the
 * DebugTracer application.
 **/
void Trace (const char *format, ...);

/**
 * SendTraceMessage(text)
 * 
 * This function sends the 'text' message from the CT library to the DebugTracer tool
 * It used the Windows SendMessage API
 **/
long SendTraceMessage(const char *text, int len);

/**
 * FindTraceWindow()
 *
 *
 * This function asks the OS for a list of all Windows. For each Window
 * the callback function EnumWindowsProc will be called
 **/
BOOL FindTraceWindow(void);

/**
 * CALLBACK EnumWindowsProc (used by FindTraceWindow)
 *
 * This function compares the Window ID string with the name of the
 * Debug Tracer tool. If found, the Window Handle will be remembered
 * for coming Trace() calls
 **/
BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam);

extern HWND m_hWnd;
extern char m_sTraceBuffer[255];
extern const char* m_sEXEname;

#endif //DEBUGTRACER
#endif

