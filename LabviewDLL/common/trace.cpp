/**********************************************************
 * This file is generated by the 20-sim C++ Code Generator
 *
 *  file:  %FILE_NAME%
 *  subm:  %SUBMODEL_NAME%
 *  model: %MODEL_NAME%
 *  expmt: %EXPERIMENT_NAME%
 *  date:  %GENERATION_DATE%
 *  time:  %GENERATION_TIME%
 *  user:  %USER_NAME%
 *  from:  %COMPANY_NAME%
 *  build: %GENERATION_BUILD%
 **********************************************************/

/* Standard include files */
#include <stdio.h>
#ifdef UNICODE
#include <tchar.h>	//Unicode
#endif
#include "trace.h"

#if defined DEBUGTRACER && defined DEBUG

#define PROGRAM_NAME "%SUBMODEL_NAME%_DLL\t"

/* Globals */
HWND m_hWnd = 0;
bool m_bDTInitialised = false;
char m_sTraceBuffer[255];

/* Functions */
long SendTraceMessage(char *text, int len)
{
	COPYDATASTRUCT cds;
	long retval=0;

	cds.dwData = 0;
	cds.cbData = len;
	cds.lpData = text;

	// This function does the real message transfer from CT to the DebugTracer
	retval = SendMessageTimeout(m_hWnd, WM_COPYDATA, 0, (LPARAM) &cds, SMTO_NORMAL, 5000, 0);
        
	return(retval);
}

BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam)
{
	// Check the name of this Window and stop enumerating if it is the DEBUGTRACER
#ifdef UNICODE
	if (GetProp(hwnd, _T("DEBUGTRACER_TRACEWIN") ) != NULL)
#else
	if (GetProp(hwnd, "DEBUGTRACER_TRACEWIN" ) != NULL)
#endif
	{
		m_hWnd = hwnd;
		return(false);
	}
	else
	{
		return(true);	
	}
}

BOOL FindTraceWindow()
{
	m_hWnd = 0;

	// Enumerate all Windows by calling EnumWindowsProc for each Window
	return(EnumWindows(&EnumWindowsProc, 0));
}

void Trace (const char *format, ...)
{
	va_list args;    
	va_start(args, format);
	int len;

	if (m_bDTInitialised == false)
	{
		FindTraceWindow();
		m_bDTInitialised = true;
	}

	if (m_hWnd > 0)
	{	// DebugTracer is running, send the message to that application
#if _MSC_VER > 1300 //.NET
		len =  sprintf_s(m_sTraceBuffer, 255, PROGRAM_NAME);
		len += vsprintf_s(m_sTraceBuffer + len, 255-len ,format, args);
#else
		len =  snprintf(m_sTraceBuffer, 255, PROGRAM_NAME);
		len += vsprintf(m_sTraceBuffer + len, format, args);
#endif
		SendTraceMessage(m_sTraceBuffer, len);
	}

	va_end(args);
}
#endif //#if defined DEBUGTRACER && defined DEBUG
